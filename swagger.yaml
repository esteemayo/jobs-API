openapi: 3.0.0
info:
  title: Jobs API
  contact:
    name: Emmanuel Adebayo
    email: eadebayo15@gmail.com
  version: '1.0'
servers:
  - url: https://myjobapi.herokuapp.com/api/v1
    variables: {}
paths:
  /users/register:
    post:
      tags:
        - Auth
      summary: Register User
      operationId: RegisterUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
            example:
              name: Test User
              email: test@example.com
              password: test1234
              confirmPassword: test1234
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
    parameters: []
  /users/login:
    post:
      tags:
        - Auth
      summary: Login User
      operationId: LoginUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
            example:
              email: jdoe@example.com
              password: '{{password}}'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
    parameters: []
  /users/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      operationId: ForgotPassword
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            example:
              email: test@example.com
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
    parameters: []
  /users/reset-password/{token}:
    parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
        description: Password Reset Token
    post:
      tags:
        - Auth
      summary: Reset Password
      operationId: ResetPassword
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            example:
              password: pass1234
              confirmPassword: pass1234
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /users/update-user-password:
    patch:
      tags:
        - Auth
      summary: Update Current User Password
      operationId: UpdateCurrentUserPassword
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCurrentUserPasswordRequest'
            example:
              currentPassword: test1234
              password: pass1234
              confirmPassword: pass1234
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    parameters: []
  /jobs:
    get:
      tags:
        - Job
      summary: Get All Jobs
      operationId: GetAllJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    post:
      tags:
        - Job
      summary: Create New Job
      operationId: CreateNewJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewJobRequest'
            example:
              company: Zoom
              position: Full-Stack Developer
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    parameters: []
  /jobs/details{slug}:
    parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
        description: The Job SLUG
    get:
      tags:
        - Job
      summary: Get Single Job By Slug
      operationId: GetSingleJobBySlug
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The Job ID
    get:
      tags:
        - Job
      summary: Get Single Job By Id
      operationId: GetSingleJobById
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false

    patch:
      tags:
        - Job
      summary: Update Job
      operationId: UpdateJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJobRequest'
            example:
              company: random inc
              position: full-stack developer
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    delete:
      tags:
        - Job
      summary: Delete Job
      operationId: DeleteJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
  /users:
    get:
      tags:
        - User
      summary: Get All Users
      operationId: GetAllUsers
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    post:
      tags:
        - User
      summary: Create New User
      operationId: CreateNewUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    parameters: []
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The User ID
    get:
      tags:
        - User
      summary: Get Single User
      operationId: GetSingleUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false

    patch:
      tags:
        - User
      summary: Update User
      operationId: UpdateUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              name: Testing User
              email: testing@example.com
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false

    delete:
      tags:
        - User
      summary: Delete User
      operationId: DeleteUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false

  /users/me:
    get:
      tags:
        - User
      summary: Get Current User
      operationId: GetCurrentUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    parameters: []

  /users/update-user:
    patch:
      tags:
        - User
      summary: Update Current User Data
      operationId: UpdateCurrentUserData
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCurrentUserDataRequest'
            example:
              name: Testing User
              email: testing@example.com
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    parameters: []
  /users/delete-user:
    delete:
      tags:
        - User
      summary: Delete Current User
      operationId: DeleteCurrentUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    parameters: []
components:
  schemas:
    RegisterUserRequest:
      title: RegisterUserRequest
    LoginUserRequest:
      title: LoginUserRequest
    ForgotPasswordRequest:
      title: ForgotPasswordRequest
    ResetPasswordRequest:
      title: ResetPasswordRequest
    UpdateCurrentUserPasswordRequest:
      title: UpdateCurrentUserPasswordRequest
    CreateNewJobRequest:
      title: CreateNewJobRequest
    UpdateJobRequest:
      title: UpdateJobRequest
    UpdateUserRequest:
      title: UpdateUserRequest
    UpdateCurrentUserDataRequest:
      title: UpdateCurrentUserDataRequest
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
security:
  - httpBearer: []
tags:
  - name: Auth
  - name: Job
  - name: User
